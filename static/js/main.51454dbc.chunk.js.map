{"version":3,"sources":["components/Button/index.js","views/Welcome/index.jsx","components/Input/index.jsx","components/FormEmployee/index.jsx","config.js","views/RegisterEmployee/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","text","onClick","className","Welcome","to","Input","type","name","placeholder","onChange","value","FormEmployee","props","nameEmployee","emailEmployee","phoneEmployee","passwordEmployee","confirmPasswordEmployee","handleChangeName","handleChangeEmail","handleChangePhone","handleChangePassword","handleChangeConfirmPassword","registerEmployeeInFirebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","providers","emailProvider","EmailAuthProvider","firebaseAppAuth","auth","withFirebaseAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","user","error","useState","setNameEmployee","setEmailEmployee","setPhoneEmployee","setPasswordEmployee","setConfirmPasswordEmployee","e","target","inputs","filteredInputs","filter","input","map","length","alert","validateInputs","console","log","then","catch","message","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51454dbc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nconst Button = ({text, onClick}) => {\r\n    return(\r\n        <button onClick={onClick} className=\"button\">\r\n            <p>{text}</p>\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Button","import React from 'react';\r\nimport './style.css';\r\nimport Button from '../../components/Button';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Welcome = () => {\r\n    return(\r\n      <section className=\"background-welcome\">\r\n          <nav>\r\n          <Link to=\"/registerUser\" className=\"start-button\">\r\n          <Button text=\"USUARIO\" className=\"size\"/>\r\n          </Link>\r\n        </nav>\r\n        <nav>\r\n          <Link to=\"/registerEmployee\" className=\"start-button\">\r\n          <a>Tecnico de lavado</a>\r\n          </Link>\r\n        </nav>  \r\n      </section> \r\n    )\r\n}\r\n\r\n\r\nexport default Welcome;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Input = ({type, name, placeholder, onChange, value}) =>{\r\n   return (\r\n       <label className=\"input-container\">\r\n           <input \r\n            className=\"input\" \r\n            type={type} \r\n            name={name} \r\n            onChange={onChange}\r\n            value={value}\r\n            />\r\n           <span className=\"placeholder\">{placeholder}</span>\r\n           <span className=\"border\"></span>\r\n       </label>\r\n   )\r\n}\r\nexport default Input;","import React from \"react\";\r\nimport {Input} from '../';\r\nimport \"./style.css\";\r\n\r\nconst FormEmployee = (props) => {\r\n    const {\r\n        nameEmployee, \r\n        emailEmployee,\r\n        phoneEmployee,\r\n        passwordEmployee,\r\n        confirmPasswordEmployee,\r\n        handleChangeName,\r\n        handleChangeEmail,\r\n        handleChangePhone,\r\n        handleChangePassword,\r\n        handleChangeConfirmPassword,\r\n        registerEmployeeInFirebase\r\n        } = props;\r\n    return (\r\n        <form className=\"form-employee\">\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Nombre\"\r\n                value={nameEmployee}\r\n                onChange={handleChangeName}\r\n            />\r\n            <Input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                placeholder=\"Correo electrónico\"\r\n                value={emailEmployee}\r\n                onChange={handleChangeEmail}\r\n            />\r\n            <Input\r\n                type=\"number\"\r\n                name=\"phone\"\r\n                placeholder=\"Teléfono\"\r\n                value={phoneEmployee}\r\n                onChange={handleChangePhone}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Crear contraseña\"\r\n                value={passwordEmployee}\r\n                onChange={handleChangePassword}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"confirm-password\"\r\n                placeholder=\"Confirmar contraseña\"\r\n                value={confirmPasswordEmployee}\r\n                onChange={ handleChangeConfirmPassword}\r\n            />\r\n            <input className=\"button\" onClick={registerEmployeeInFirebase} type =\"submit\" value=\"Aceptar\" />           \r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default FormEmployee;"," import * as firebase from 'firebase/firebase-app'\r\n//  const firebaseConfig = { \r\n//     apiKey: process.env.API_KEY, \r\n//     authDomain: process.env.AUTH_DOMAIN,\r\n//     databaseURL: process.env.DATABASE_URL,\r\n//     projectId: process.env.PROJECT_ID,\r\n//     storageBucket: process.env.STORAGE_BUCKET, \r\n//     messagingSenderId: process.env.MESSAGING_SENDER_ID,\r\n//     appId: process.env.APP_ID };\r\n        \r\n        \r\n//         firebase.initializeApp(firebaseConfig); \r\n//         // let db = firebase.firestore();\r\n\r\n//         export default firebaseConfig;\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCvSHU1Jm15KTntTRa3OS6uzyrx-21tZdw\",\r\n    authDomain: \"car-cleaner-hackaton.firebaseapp.com\",\r\n    databaseURL: \"https://car-cleaner-hackaton.firebaseio.com\",\r\n    projectId: \"car-cleaner-hackaton\",\r\n    storageBucket: \"car-cleaner-hackaton.appspot.com\",\r\n    messagingSenderId: \"37811360249\",\r\n    appId: \"1:37811360249:web:e27496e1bd57e9c4a12d28\"\r\n  };\r\n        firebase.initializeApp(firebaseConfig); \r\n\r\n          export default firebaseConfig;\r\n","import React, {useState} from 'react';\r\nimport {FormEmployee} from '../../components';\r\nimport * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport firebaseConfig from '../../config'\r\nimport withFirebaseAuth from 'react-with-firebase-auth';\r\nimport './style.css';\r\n\r\nconst RegisterEmployee = ({signInWithEmailAndPassword,\r\n    createUserWithEmailAndPassword, user, error}) => {\r\n    const [nameEmployee, setNameEmployee] = useState('')\r\n    const [emailEmployee, setEmailEmployee] = useState('')\r\n    const [phoneEmployee, setPhoneEmployee] = useState('')\r\n    const [passwordEmployee, setPasswordEmployee] = useState('')\r\n    const [confirmPasswordEmployee, setConfirmPasswordEmployee] = useState('')\r\n\r\n    const handleChangeName = (e) => setNameEmployee(e.target.value)\r\n    const handleChangeEmail = (e) => setEmailEmployee(e.target.value)\r\n    const handleChangePhone = (e) => setPhoneEmployee(e.target.value)\r\n    const handleChangePassword= (e) => setPasswordEmployee(e.target.value)\r\n    const handleChangeConfirmPassword = (e) => setConfirmPasswordEmployee(e.target.value)\r\n\r\n   const validateInputs = () =>{\r\n        const inputs = [nameEmployee, emailEmployee, phoneEmployee, passwordEmployee, confirmPasswordEmployee]\r\n        const filteredInputs = inputs.filter(input => input !== '' || input !== null).map(input => input)\r\n        if(passwordEmployee !== confirmPasswordEmployee){\r\n             alert('Las contraseñas no son iguales') \r\n             return\r\n        }\r\n        if(inputs.length === filteredInputs.length){\r\n            return true\r\n        }\r\n        return false\r\n   }\r\n\r\n    const registerEmployeeInFirebase = () =>{\r\n         if(validateInputs()=== false){\r\n             return \r\n         }\r\n         console.log(\"iniciando proceso\")\r\n         createUserWithEmailAndPassword(emailEmployee, passwordEmployee)\r\n         .then(()=> console.log(\"ya se guardó el usuario\"))\r\n         .then(()=>signInWithEmailAndPassword(emailEmployee, passwordEmployee))\r\n         .catch(error => alert(error.message))\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <section className=\"register-employee\">\r\n            <FormEmployee\r\n             nameEmployee={nameEmployee} \r\n             emailEmployee={emailEmployee}\r\n             phoneEmployee={phoneEmployee}\r\n             passwordEmployee={passwordEmployee}\r\n             confirmPasswordEmployee={confirmPasswordEmployee}\r\n             handleChangeName={handleChangeName}\r\n             handleChangeEmail={handleChangeEmail}\r\n             handleChangePhone={handleChangePhone}\r\n             handleChangePassword={handleChangePassword}\r\n             handleChangeConfirmPassword={handleChangeConfirmPassword}\r\n             registerEmployeeInFirebase={registerEmployeeInFirebase}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nconst providers = {\r\n    emailProvider : new firebase.auth.EmailAuthProvider(),\r\n}\r\n\r\n\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst firebaseAppAuth = firebaseApp.auth();\r\n\r\nexport default withFirebaseAuth({\r\n    providers,\r\n\r\n    firebaseAppAuth,\r\n})(RegisterEmployee);","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Welcome from './views/Welcome/index'\r\nimport RegisterEmployee from './views/RegisterEmployee/index'\r\nimport RegisterUser from './views/RegisterEmployee/index'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {/* <Route exact path = \"/\" render = {props => <Welcome/>}></Route> */}\r\n        {/* <Route exact path = \"/registerUser\" render = {props => <RegisterUser/>}></Route> */}\r\n        {<Route exact path = \"/registerEmployee\" render = {props => <RegisterEmployee/>}></Route> }\r\n        <Route exact path = \"/registerUser\" render = {props => <RegisterUser/>}></Route> \r\n        <Route exact path = \"/welcome\" render = {props => <Welcome/>}></Route>\r\n      </Switch>\r\n    </Router> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}