{"version":3,"sources":["views/Welcome/index.jsx","components/Input/index.jsx","components/FormEmployee/index.jsx","config.js","firebaseInitialize.js","components/FormUser/index.jsx","views/RegisterUser/index.jsx","views/RegisterEmployee/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","className","to","Input","type","name","placeholder","onChange","value","FormEmployee","props","nameEmployee","emailEmployee","phoneEmployee","passwordEmployee","confirmPasswordEmployee","handleChangeName","handleChangeEmail","handleChangePhone","handleChangePassword","handleChangeConfirmPassword","registerEmployeeInFirebase","onClick","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseApp","firebase","firebaseAppAuth","auth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","nameUser","emailUser","phoneUser","passwordUser","confirmPasswordUser","handleChange","registerUserInFirebase","signInWithGoogle","RegisterUser","emailProvider","EmailAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","user","error","useState","setNameEmployee","setEmailEmployee","setPhoneEmployee","setPasswordEmployee","setConfirmPasswordEmployee","e","target","inputs","filteredInputs","filter","input","map","length","alert","validateInputs","console","log","then","catch","message","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5307b132.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n// import Button from '../../components/Button';\nimport {Link} from 'react-router-dom';\n\nconst Welcome = () => {\n    return(\n      <section className=\"background-welcome\">\n          <nav className=\"navigation-menu\">\n          <Link to=\"/registerUser\" className=\"user-btn\">\n          USUARIO\n          </Link>\n          <Link to=\"/registerEmployee\" className=\"nav-a\">\n            Técnico de lavado\n          </Link>\n        </nav>  \n      </section> \n    )\n}\n\n\nexport default Welcome;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Input = ({type, name, placeholder, onChange, value}) =>{\r\n   return (\r\n       <label className=\"input-container\">\r\n           <input \r\n            className=\"input\" \r\n            type={type} \r\n            name={name} \r\n            onChange={onChange}\r\n            value={value}\r\n            />\r\n           <span className=\"placeholder\">{placeholder}</span>\r\n           <span className=\"border\"></span>\r\n       </label>\r\n   )\r\n}\r\nexport default Input;","import React from \"react\";\r\nimport {Input} from '../';\r\nimport Button from '../Button/index'\r\nimport \"./style.css\";\r\n\r\nconst FormEmployee = (props) => {\r\n    const {\r\n        nameEmployee, \r\n        emailEmployee,\r\n        phoneEmployee,\r\n        passwordEmployee,\r\n        confirmPasswordEmployee,\r\n        handleChangeName,\r\n        handleChangeEmail,\r\n        handleChangePhone,\r\n        handleChangePassword,\r\n        handleChangeConfirmPassword,\r\n        registerEmployeeInFirebase\r\n        } = props;\r\n    return (\r\n        <form className=\"form-employee\">\r\n            <Input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Nombre\"\r\n                value={nameEmployee}\r\n                onChange={handleChangeName}\r\n            />\r\n            <Input\r\n                type=\"text\"\r\n                name=\"email\"\r\n                placeholder=\"Correo electrónico\"\r\n                value={emailEmployee}\r\n                onChange={handleChangeEmail}\r\n            />\r\n            <Input\r\n                type=\"number\"\r\n                name=\"phone\"\r\n                placeholder=\"Teléfono\"\r\n                value={phoneEmployee}\r\n                onChange={handleChangePhone}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Crear contraseña\"\r\n                value={passwordEmployee}\r\n                onChange={handleChangePassword}\r\n            />\r\n             <Input\r\n                type=\"password\"\r\n                name=\"confirm-password\"\r\n                placeholder=\"Confirmar contraseña\"\r\n                value={confirmPasswordEmployee}\r\n                onChange={ handleChangeConfirmPassword}\r\n            />\r\n            <p>Lee nuestros <a>términos y condiciones</a></p>\r\n\r\n            <input className=\"button\" onClick={registerEmployeeInFirebase} type =\"submit\" value=\"Aceptar\" />           \r\n\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default FormEmployee;","\n import * as firebase from 'firebase/firebase-app'\n//  const firebaseConfig = { \n\n//     apiKey: process.env.API_KEY, \n//     authDomain: process.env.AUTH_DOMAIN,\n//     databaseURL: process.env.DATABASE_URL,\n//     projectId: process.env.PROJECT_ID,\n//     storageBucket: process.env.STORAGE_BUCKET, \n//     messagingSenderId: process.env.MESSAGING_SENDER_ID,\n//     appId: process.env.APP_ID };\n        \n        \n//         firebase.initializeApp(firebaseConfig); \n//         // let db = firebase.firestore();\n\n//         export default firebaseConfig;\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCvSHU1Jm15KTntTRa3OS6uzyrx-21tZdw\",\n    authDomain: \"car-cleaner-hackaton.firebaseapp.com\",\n    databaseURL: \"https://car-cleaner-hackaton.firebaseio.com\",\n    projectId: \"car-cleaner-hackaton\",\n    storageBucket: \"car-cleaner-hackaton.appspot.com\",\n    messagingSenderId: \"37811360249\",\n    appId: \"1:37811360249:web:e27496e1bd57e9c4a12d28\"\n  };\n\n\n\n          export default firebaseConfig;\n\n\n\n","import * as firebase from 'firebase/app';\nimport firebaseConfig from '../src/config'\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig); \nexport default firebaseApp;","import React from \"react\";\nimport { Input } from '../';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport withFirebaseAuth, { WrappedComponentProps } from 'react-with-firebase-auth';\nimport \"./style.css\";\nimport Button from '../Button/index'\nimport firebaseApp from '../../firebaseInitialize'\n\n\n\n// const firebaseApp = firebase.initializeApp(firebaseConfig);\nconst FormUser = ( props ) => {\n    const {\n        nameUser, \n        emailUser,\n        phoneUser,\n        passwordUser,\n        confirmPasswordUser,\n        handleChange,\n        registerUserInFirebase,\n        signInWithGoogle\n        } = props;\n\n    \n\n    return (\n        <form className=\"form-employee\">\n            <Input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Nombre de usuario\"\n                value={nameUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"number\"\n                name=\"phone\"\n                placeholder=\"Teléfono\"\n                value={phoneUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"text\"\n                name=\"email\"\n                placeholder=\"Correo electrónico\"\n                value={emailUser}\n                onChange={handleChange}\n            />\n\n            <Input\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Crear contraseña\"\n                value={passwordUser}\n                onChange={handleChange}\n            />\n            <Input\n                type=\"password\"\n                name=\"confirm-password\"\n                placeholder=\"Confirmar contraseña\"\n                value={confirmPasswordUser}\n                onChange={ handleChange}\n            />\n            <input className=\"button\" onClick={registerUserInFirebase} type =\"submit\" value=\"Aceptar\" />           \n            <div>\n           \n                    < button onClick={signInWithGoogle}>Sign in with Google</button>\n          \n            </div>\n        </form >\n    )\n\n}\n\nconst firebaseAppAuth = firebaseApp.auth();\nconst providers = {\n    googleProvider: new firebase.auth.GoogleAuthProvider(),\n  };\n\n  export default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n  })(FormUser);\n\n","import React from 'react';\nimport FormUser from '../../components/FormUser/index';\nimport './style.css';\n\n\n\nconst RegisterUser = () => {\n    \n    return (\n        <section className=\"register-user\">\n            <FormUser/>\n        </section>\n    )\n}\n\nexport default RegisterUser","\nimport React, {useState} from 'react';\nimport {FormEmployee} from '../../components';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport firebaseApp from '../../firebaseInitialize'\nimport withFirebaseAuth from 'react-with-firebase-auth';\n// import {MapComponent} from '../../components'\nimport './style.css';\n\nconst RegisterEmployee = ({signInWithEmailAndPassword,\n    createUserWithEmailAndPassword, user, error}) => {\n    const [nameEmployee, setNameEmployee] = useState('')\n    const [emailEmployee, setEmailEmployee] = useState('')\n    const [phoneEmployee, setPhoneEmployee] = useState('')\n    const [passwordEmployee, setPasswordEmployee] = useState('')\n    const [confirmPasswordEmployee, setConfirmPasswordEmployee] = useState('')\n\n    const handleChangeName = (e) => setNameEmployee(e.target.value)\n    const handleChangeEmail = (e) => setEmailEmployee(e.target.value)\n    const handleChangePhone = (e) => setPhoneEmployee(e.target.value)\n    const handleChangePassword= (e) => setPasswordEmployee(e.target.value)\n    const handleChangeConfirmPassword = (e) => setConfirmPasswordEmployee(e.target.value)\n\n   const validateInputs = () =>{\n        const inputs = [nameEmployee, emailEmployee, phoneEmployee, passwordEmployee, confirmPasswordEmployee]\n        const filteredInputs = inputs.filter(input => input !== '' || input !== null).map(input => input)\n        if(passwordEmployee !== confirmPasswordEmployee){\n             alert('Las contraseñas no son iguales') \n             return\n        }\n        if(inputs.length === filteredInputs.length){\n            return true\n        }\n        return false\n   }\n\n    const registerEmployeeInFirebase = () =>{\n         if(validateInputs()=== false){\n             return \n         }\n         console.log(\"iniciando proceso\")\n         createUserWithEmailAndPassword(emailEmployee, passwordEmployee)\n         .then(()=> console.log(\"ya se guardó el usuario\"))\n         .then(()=>signInWithEmailAndPassword(emailEmployee, passwordEmployee))\n         .catch(error => alert(error.message))\n    }\n\n\n    \n    return (\n        <section className=\"register-employee\">\n            <FormEmployee\n             nameEmployee={nameEmployee} \n             emailEmployee={emailEmployee}\n             phoneEmployee={phoneEmployee}\n             passwordEmployee={passwordEmployee}\n             confirmPasswordEmployee={confirmPasswordEmployee}\n             handleChangeName={handleChangeName}\n             handleChangeEmail={handleChangeEmail}\n             handleChangePhone={handleChangePhone}\n             handleChangePassword={handleChangePassword}\n             handleChangeConfirmPassword={handleChangeConfirmPassword}\n             registerEmployeeInFirebase={registerEmployeeInFirebase}\n            />\n            {/* <MapComponent /> */}\n        </section>\n    )\n}\n\nconst providers = {\n    emailProvider : new firebase.auth.EmailAuthProvider(),\n}\n\n\n\n// const firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseAppAuth = firebaseApp.auth();\n\nexport default withFirebaseAuth({\n    providers,\n    firebaseAppAuth,\n})(RegisterEmployee);\n\n\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Welcome from './views/Welcome/index';\nimport RegisterUser from './views/RegisterUser/index';\nimport RegisterEmployee from './views/RegisterEmployee/index';\n\nfunction App() {\n\n  return (\n    \n    <Router>\n      <Switch>\n        {/* <Route exact path = \"/\" render = {props => <Welcome/>}></Route> */}\n         <Route exact path = \"/registerUser\" render = {props => <RegisterUser/>}></Route> \n        {<Route exact path = \"/registerEmployee\" render = {props => <RegisterEmployee/>}></Route> }\n        <Route exact path = \"/registerUser\" render = {props => <RegisterUser/>}></Route> \n        <Route exact path = \"/\" render = {props => <Welcome/>}></Route>\n      </Switch>\n    </Router> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}